
#include <stdio.h>
#include <stdlib.h>
void FIFO()
{
	int incomingStream[] = {4,0,3,8,5,9,6};
	int pageFaults = 0;
	int frames = 4;
	int m, n,s, pages;
	pages = sizeof(incomingStream)/sizeof(incomingStream[0]);
	printf("\nIncoming \t\tFrame 1 \t\tFrame2 \t\tFrame3");
	int temp[frames];
	for(m= 0; m<frames; m++)
	{
		temp[m]= -1;

	}
	for(m= 0; m<pages; m++)
	{
		s = 0;
		for(n = 0; n<frames; n++)
		{
			if(incomingStream[m]==temp[n])
			{
				s++;
				pageFaults--;
			}
		}

		pageFaults++;
	if((pageFaults<=frames) && (s == 0))
	{
		temp[m]= incomingStream[m];

	}
	else if(s == 0)
	{
		temp[(pageFaults -1)%frames]= incomingStream[m];
	}
	printf("\n");
	printf("%d\t\t\t",incomingStream[m]);
	for(n = 0; n<frames; n++)
	{
		if(temp[n]!= -1)
		{
			printf("%d\t\t\t", temp[n]);

		}
		else
		{
			printf("-\t\t\t");

		}
	}

}
	printf("\n------------------------------------------------------------------------------");
	printf("\nTotal page fault:\t%d\n",pageFaults);
}
void LRU()
{
	int total_frames=4;
	int m,n,position,k,l;
	int a=0,b=0,page_fault=0;
	int frames[total_frames];
	int temp[total_frames];

	int pages[]={7,0,1,2,0,3,0,4,2,3,0,3,2,0,3};
	int total_pages=sizeof(pages)/sizeof(pages[0]);
	for(m=0;m<total_frames;m++)
	{
		frames[m]=-1;

	}
	for(n=0;n<total_pages;n++)
	{
		printf("%d:",pages[n]);
		a=0,b=0;
		for(m=0;m<total_frames;m++)
		{
			if(frames[m]==pages[n])
			{
				a=1;
				b=1;
				break;
			}
		}
		if(a==0)
		{
			for(m=0;m<total_frames;m++)
			{
				if(frames[m]==-1)
				{
					frames[m]=pages[n];
					b=1;
					page_fault++;
					break;
				}
			}
		}
		if(b==0)
		{
			for(m=0;m<total_frames;m++)
			{
				temp[m]=0;
			}
			for(k=n-1,l=0;l<total_frames-1;l++,k--)
			{
				for(m=0;m<total_frames;m++)
				{
					if(frames[m]==pages[k])
					{
						temp[m]=1;
					}
				}
			}
			for(m=0;m<total_frames;m++)
			{
				if(temp[m]==0)
					position=m;
			}
			frames[position]=pages[n];
			page_fault++;
		}
		for(m=0;m<total_frames;m++)
		{
			printf("%d\t",frames[m]);
		}
		printf("\n");
	}
	printf("\ntotal number of page faults:\t%d\n",page_fault);

}
void OPT()
{
    int flag1, flag2, flag3, i, j, k, position, max, faults = 0;
    int num_frames = 4;

    int frames[num_frames];
    int temp[num_frames];

    int inputStream[] = {7,0,1,2,0,3,0,4,2,3,0,3,2,3};

    int num_pages = sizeof(inputStream) / sizeof(inputStream[0]);

    for (i = 0; i < num_frames; i++)
    {
        frames[i] = -1;
    }
    for (i = 0; i < num_pages; i++)
    {
        flag1 = flag2 = 0;

        for (j = 0; j < num_frames; j++)
        {
            if (frames[j] == inputStream[i])
            {
                flag1 = flag2 = 1;
                break;
            }
        }

        if (flag1 == 0)
        {
            for (j = 0; j < num_frames; j++)
            {
                if (frames[j] == -1)
                {
                    faults++;
                    frames[j] = inputStream[i];
                    flag2 = 1;
                    break;
                }
            }
        }
        if (flag2 == 0)
        {
            flag3 = 0;

            for (j = 0; j < num_frames; j++)
            {
                temp[j] = -1;

                for (k = i + 1; k < num_pages; k++)
                {
                    if (frames[j] == inputStream[k])
                    {
                        temp[j] = k;
                        break;
                    }
                }
            }
            for (j = 0; j < num_frames; j++)
            {
                if (temp[j] == -1)
                {
                    position = j;
                    flag3 = 1;
                    break;
                }
            }
            if (flag3 == 0)
            {
                max = temp[0];
                position = 0;

                for (j = 1; j < num_frames; j++)
                {
                    if (temp[j] > max)
                    {
                        max = temp[j];
                        position = j;
                    }
                }
            }

            frames[position] = inputStream[i];
            faults++;
        }

        printf("\n");

        for (j = 0; j < num_frames; j++)
        {
            printf("%d\t", frames[j]);
        }
    }
    printf("\n\nTotal Page Faults = %d", faults);

}

int main() {
	int c;
	do{
	printf("\n1.FIFO");
	printf("\n2.LRU");
	printf("\n3.OPTIMAL");

	printf("\nenter your choice");
	scanf("%d",&c);
	switch(c)
	{
	case 1:printf("\n----------------FIFO----------------------------------------------------------");
	       FIFO();
	       break;
	case 2:printf("\n----------------LRU----------------------------------------------------------");
	       LRU();
	       break;
	case 3:printf("\n----------------OPTIMAL----------------------------------------------------------");
	       OPT();
	       break;
	default:
		printf("Invalid choice");
		break;

	}
	}while(c!=4);



	//return EXIT_SUCCESS;
}


/* output 

1.FIFO
2.LRU
3.OPTIMAL
enter your choice1

----------------FIFO----------------------------------------------------------
Incoming 		Frame 1 		Frame2 		Frame3
4			4			-			-			-			
0			4			0			-			-			
3			4			0			3			-			
8			4			0			3			8			
5			5			0			3			8			
9			5			9			3			8			
6			5			9			6			8			
------------------------------------------------------------------------------
Total page fault:	7

1.FIFO
2.LRU
3.OPTIMAL
enter your choice2

----------------LRU----------------------------------------------------------7:7	-1	-1	-1	
0:7	0	-1	-1	
1:7	0	1	-1	
2:7	0	1	2	
0:7	0	1	2	
3:3	0	1	2	
0:3	0	1	2	
4:3	0	1	4	
2:3	0	2	4	
3:3	0	2	4	
0:3	0	2	4	
3:3	0	2	4	
2:3	0	2	4	
0:3	0	2	4	
3:3	0	2	4	

total number of page faults:	7

1.FIFO
2.LRU
3.OPTIMAL
enter your choice3

----------------OPTIMAL----------------------------------------------------------
7	-1	-1	-1	
7	0	-1	-1	
7	0	1	-1	
7	0	1	2	
7	0	1	2	
3	0	1	2	
3	0	1	2	
3	0	4	2	
3	0	4	2	
3	0	4	2	
3	0	4	2	
3	0	4	2	
3	0	4	2	
3	0	4	2	

Total Page Faults = 6
1.FIFO
2.LRU
3.OPTIMAL
enter your choice4
Invalid choice

*/

